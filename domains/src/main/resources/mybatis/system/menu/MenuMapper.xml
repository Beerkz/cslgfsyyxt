<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cslg.system.repository.SysMenuRepository">

    <sql id="sysMenu">
            id,
            parent_id,
            name,
            type,
            path,
            component,
            perms,
            icon,
            sort_value,
            status,
            create_time,
            update_time,
            is_deleted
    </sql>
    <resultMap id="findMenuBtn" type="com.cslg.system.entity.SysMenu">
        <id column="id" property="id"></id>
        <collection property="children"
                    column="id"
                    ofType="com.cslg.system.entity.SysMenu"
                    select="com.cslg.system.repository.SysMenuRepository.findAllBtn"
        >
        </collection>
    </resultMap>
    <!-- List<SysMenu> findAllMenu(); -->
    <select id="findAllMenu" resultMap="findMenuBtn">
        select
        <include refid="sysMenu"></include>
        from sys_menu
        where type != 2 and is_deleted = 0
        order by sort_value
    </select>
    <!-- List<SysMenu> findAllBtn(); -->
    <select id="findAllBtn" resultType="com.cslg.system.entity.SysMenu">
        select
        <include refid="sysMenu"></include>
        from sys_menu
        where parent_id=#{id} and is_deleted = 0
        order by id
    </select>

    <!-- void insertMenu(SysMenu sysMenu); -->
    <insert id="insertMenu">
        insert into sys_menu
        <trim prefix="(" suffix=")">
            <if test="parentId != null and parentId != '' ">
                parent_id,
            </if>
            <if test="name !=null and name !='' ">
                name,
            </if>
            <if test="type != null and type !='' ">
                type,
            </if>
            <if test="path !=null and path !='' ">
                path,
            </if>
            <if test="component !=null and component !='' ">
                component,
            </if>
            <if test="perms !=null and perms !=''">
                perms,
            </if>
            <if test="icon != null and icon != '' ">
                icon,
            </if>
            <if test="sortValue != null and sortValue != '' ">
                sort_value,
            </if>
            status
        </trim>

        <trim prefix="values(" suffix=")">
            <if test="parentId != null and parentId != '' ">
                #{parentId},
            </if>
            <if test="name !=null and name !='' ">
                #{name},
            </if>
            <if test="type != null and type !='' ">
                #{type},
            </if>
            <if test="path !=null and path !='' ">
                #{path},
            </if>
            <if test="component !=null and component !='' ">
                #{component},
            </if>
            <if test="perms !=null and perms !=''">
                #{perms},
            </if>
            <if test="icon != null and icon != '' ">
                #{icon},
            </if>
            <if test="sortValue != null and sortValue != '' ">
                #{sortValue},
            </if>
            1
        </trim>
    </insert>

    <!-- void updateMenu(SysMenu sysMenu); -->
    <update id="updateMenu">
        update sys_menu
        set parent_id  = #{parentId},
            name       =#{name},
            type= #{type},
            path       = #{path},
            component  = #{component},
            perms      = #{perms},
            icon       = #{icon},
            sort_value = #{sortValue}
        where id = #{id}
    </update>

    <!-- void deleteMenuBtn(@Param("id") Long parentId); -->
    <update id="deleteMenuBtn">
        update sys_menu
        set is_deleted = 1
        where parent_id = #{id}
          and type = 2
    </update>

    <!-- SysMenu findMenuById(@Param("id") Long id); -->
    <select id="findMenuById" resultMap="findMenuBtn">
        select
        <include refid="sysMenu"></include>
        from sys_menu
        where id = #{id}
    </select>

    <!-- void deleteMenu(@Param("id") Long id); -->
    <update id="deleteMenu">
        update sys_menu
        set is_deleted = 1
        where id = #{id}
    </update>

    <!-- List<SysMenu> findMenuOrBtnById(@Param("id") Long id); -->
    <select id="findMenuByParentId" resultType="com.cslg.system.entity.SysMenu">
        select
        <include refid="sysMenu"></include>
        from sys_menu
        where parent_id = #{id}
    </select>

    <!-- List<SysMenu> findMenuByRoleId(@Param("id") Long id); -->
    <select id="findMenuByRoleId" resultType="com.cslg.system.entity.SysMenu">
        select sm.id,
               sm.parent_id,
               sm.name,
               sm.type,
               sm.path,
               sm.component,
               sm.perms,
               sm.icon,
               sm.sort_value,
               sm.status,
               sm.create_time,
               sm.update_time,
               sm.is_deleted
        from sys_menu sm
                 inner join sys_role_menu srm on sm.id = srm.menu_id and srm.role_id = #{id} and srm.is_deleted = 0
        where sm.is_deleted = 0
          and sm.status = 1
    </select>

    <!-- List<SysMenu> findAllMenuAndBtn(); -->
    <select id="findAllMenuAndBtn" resultType="com.cslg.system.entity.SysMenu">
        select
        <include refid="sysMenu"></include>
        from sys_menu
        where is_deleted = 0
        order by id,sort_value
    </select>

    <!-- List<RouterVo> getUserMenuList(@Param("id") String userId); -->
    <select id="getUserMenuList">
        select
        <include refid="sysMenu"></include>
        where
        from sys_menu sm
        where sm.id in (
        select srm.menu_id
        from sys_role_menu srm
        where srm.role_id in
        (
        select sr.role_id
        from sys_user_role sr
        where sr.user_id = #{userId}
        )
        )
    </select>
</mapper>
